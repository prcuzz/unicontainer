21a22,25
> #include "linux/gfp_types.h"
> #include "linux/kvm_types.h"
> #include "linux/stddef.h"
> #include "linux/types.h"
62a67,68
> // #include <string.h>
> #include <linux/string.h>
84a91,92
> #include <linux/errno.h>
> 
89a98,103
> // ZZC
> #define UNICONTAINER_EXEC 90	
> #define DATA_LEN 30
> #define DATA_LEN_1 500
> #define ARGV_AND_ENVP_CNT 5
> // ZZC-end
9631a9646,9647
> 	printk(KERN_INFO "ZZC: kvm_emulate_hypercall()\n");	// ZZC
> 
9713a9730,9935
> 	// ZZC
> 	case UNICONTAINER_EXEC: {
> 		struct x86_exception exception; 
> 		u64 addr;
> 		u64 i = 0;
> 		char filename[DATA_LEN];
> 		char* argv[ARGV_AND_ENVP_CNT] = {NULL, NULL, NULL, NULL, NULL};
> 		char* envp[ARGV_AND_ENVP_CNT] = {NULL, NULL, NULL, NULL, NULL};
> 		char data[DATA_LEN_1];
> 		char *tmp_0, *tmp_1, *tmp_2;
> 		unsigned long arg_start = current->mm->arg_start;
> 		unsigned long arg_end = current->mm->arg_end;
> 		struct file *fp = NULL;
> 		int ret_val;
> 		loff_t pos = 0;
> 		char* ret_context = NULL;
> 
> 
> 		printk(KERN_INFO "ZZC: case UNICONTAINER_EXEC\n");
> 		printk(KERN_INFO "ZZC: filename addr %lu\n", a0);
> 		printk(KERN_INFO "ZZC: argv addr %lu\n", a1);
> 		printk(KERN_INFO "ZZC: envp addr %lu\n", a2);
> 		printk(KERN_INFO "ZZC: ret_context addr %lu\n", a3);
> 
> 		ret_context = kmalloc(DATA_LEN_1, GFP_KERNEL);		// allocate memory for ret_context
> 		if (ret_context == NULL) {
> 			goto zzc_out;
> 		}
> 		
> 		
> 		kvm_read_guest_virt(vcpu, a0, filename, DATA_LEN, &exception);	// read first arg (binary file name) from VM
> 		printk(KERN_INFO "ZZC: filename is %s\n", filename);
> 
> 		for(i = 0; i < ARGV_AND_ENVP_CNT; i++){		// read argv from VM one by one
> 			kvm_read_guest_virt(vcpu, (gva_t)(((char **)a1) + i), &addr, 8, &exception);
> 			printk(KERN_INFO "ZZC: addr is %llu\n", addr);
> 			if(addr){
> 				if(argv[i] == NULL){
> 					argv[i] = (char*)kmalloc(DATA_LEN, GFP_KERNEL);
> 					if(argv[i] == NULL){
> 						printk(KERN_INFO "ZZC: kmalloc() for argv fail.\n");
> 						ret = 0;
> 						goto zzc_out;
> 					} 
> 				}
> 				kvm_read_guest_virt(vcpu, addr, argv[i], DATA_LEN, &exception);
> 				printk(KERN_INFO "ZZC: argv[%llu] is %s\n", i, argv[i]);
> 			}
> 			else{
> 				break;
> 			}
> 		}
> 
> 		for(i = 0; i < ARGV_AND_ENVP_CNT; i++){		// read envp from VM one by one
> 			kvm_read_guest_virt(vcpu, (gva_t)(((char **)a2) + i), &addr, 8, &exception);
> 			printk(KERN_INFO "ZZC: addr is %llu\n", addr);
> 			if(addr){
> 				if(!envp[i]){
> 					envp[i] = (char*)kmalloc(DATA_LEN, GFP_KERNEL);
> 					if(envp[i] == NULL){
> 						printk(KERN_INFO "ZZC: kmalloc() for envp fail.\n");
> 						ret = 0;
> 						goto zzc_out;
> 					} 
> 				}
> 				kvm_read_guest_virt(vcpu, addr, envp[i], DATA_LEN, &exception);
> 				printk(KERN_INFO "ZZC: envp[%llu] is %s\n", i, envp[i]);
> 			}
> 			else{
> 				break;
> 			}
> 		}
> 
> 		printk(KERN_INFO "ZZC: arg_start is %lu\n", arg_start);
> 		if(copy_from_user(data, (void *)arg_start, DATA_LEN_1 -1)){	// get qemu cmd
> 			return -EFAULT;
> 		}
> 		printk(KERN_INFO "ZZC: arg_end is %lu\n", arg_end);
> 		// printk(KERN_INFO "ZZC: data is %s\n", data);
> 
> 		for(i = 0; i < arg_end - arg_start -1; i++){	// remove '\0' in qemu cmd
> 			if(data[i] == '\0'){
> 				data[i] = ' ';
> 			}
> 		}
> 
>    		printk(KERN_INFO "ZZC: qemu cmd is %s\n", data);	// print qemu cmd
> 
> 		// Merge argv and add it to the qemu cmd(argv[2])
> 		tmp_0 = kmalloc(DATA_LEN_1, GFP_KERNEL);
> 		strcpy(tmp_0, "\"");
> 		for(i = 0; i < ARGV_AND_ENVP_CNT; i++){
> 			if(argv[i]){
> 				strcat(tmp_0, argv[i]);
> 				strcat(tmp_0, " ");
> 			} 
> 		}
> 		strcat(tmp_0, "\"");
> 		printk(KERN_INFO "ZZC: merged argv is %s\n", tmp_0);
> 		tmp_1 = strstr(data, "append");		// tmp_1 points to "a" in "append" now
> 		printk(KERN_INFO "ZZC: tmp_1 is %s\n", tmp_1);
> 		tmp_1 = tmp_1 + sizeof("append");	// tmp_1 points to the character after "append " now 
> 		printk(KERN_INFO "ZZC: tmp_1 is %s\n", tmp_1);
> 		tmp_2 = strstr(tmp_1, " ");			// the old append arg is between tmp_1 and tmp_2 now
> 		printk(KERN_INFO "ZZC: tmp_2 is %s\n", tmp_2);
> 		printk(KERN_INFO "ZZC: strlen(tmp_1) is %lu\n", strlen(tmp_1));
> 		printk(KERN_INFO "ZZC: strlen(data) is %lu\n", strlen(data));
> 		kfree(argv[2]);
> 		argv[2] = kmalloc(DATA_LEN_1, GFP_KERNEL);		// Re-allocate memory for argv[2]
> 		strncpy(argv[2], data, strlen(data) - strlen(tmp_1));		// copy the part which is before the append arg
> 		strcat(argv[2], tmp_0);					// copy the new append arg
> 		strcat(argv[2], tmp_2);					// copy the part which is after the append arg
> 		printk(KERN_INFO "ZZC: the new qemu cmd is %s\n", argv[2]);
> 		strcpy(data, argv[2]);
> 
> 		for(i = 0; i < ARGV_AND_ENVP_CNT; i++){		// release argv
> 			if(argv[i]){
> 				kfree(argv[i]);
> 				argv[i] = NULL;
> 			}
> 		}
> 
> 		// for(i = 0; i < ARGV_AND_ENVP_CNT; i++){		// release envp
> 		// 	if(envp[i]){
> 		// 		kfree(envp[i]);
> 		// 		envp[i] = NULL;
> 		// 	}
> 		// }		
> 
> 		argv[0] = kmalloc(strlen("/bin/sh") + 1, GFP_KERNEL);
> 		strcpy(argv[0], "/bin/sh");
> 		argv[1] = kmalloc(strlen("-c") + 1, GFP_KERNEL);
> 		strcpy(argv[1], "-c");
> 		argv[2] = kmalloc(DATA_LEN_1, GFP_KERNEL);
> 		// strcpy(argv[2], "\'");
> 		// strcat(argv[2], data);
> 		strcpy(argv[2], data);
> 		// strcpy(argv[2], "/bin/ls");
> 		strcat(argv[2], " > /tmp/zzc-test");	// the whole cmd is [/bin/sh -c '${qemu_cmd} > /tmp/zzc-test']
> 		// strcat(argv[2], "\'");
> 
> 
> 		printk(KERN_INFO "ZZC: argv[0] is %s\n", argv[0]);
> 		printk(KERN_INFO "ZZC: argv[1] is %s\n", argv[1]);
> 		printk(KERN_INFO "ZZC: argv[2] is %s\n", argv[2]);
> 
> 
> 		ret_val = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_PROC);
> 		printk(KERN_INFO "ZZC: call_usermodehelper ret_val is %d\n", ret_val);
> 
> 		fp = filp_open("/tmp/zzc-test", O_RDONLY, 0);	// open call_usermodehelper() output file
> 		if (IS_ERR(fp)){
> 			printk(KERN_INFO "ZZC: filp_open() fail\n");
> 			ret = 0;
> 			goto zzc_out;
> 			// return -1;
> 		}
> 		
> 		pos	= 0;
> 		ret_val = kernel_read(fp, (void*)ret_context, DATA_LEN_1, &pos);	// read call_usermodehelper() output file
> 		if(ret_val >= 0) ret_context[ret_val - 1] = '\0';
> 		printk(KERN_INFO "ZZC: kernel_read() ret_val is %d\n", ret_val);
> 		printk(KERN_INFO "ZZC: data read from kernel_read() is %s\n", ret_context);
> 
> 		// TODO: return the output of the secondary container to the primary container
> 		// a3 is gva, turn it to hva, and use copy_to_user(or other function?) to convey information
> 		ret_val = kvm_write_guest_virt_system(vcpu, a3, ret_context, DATA_LEN_1, &exception);
> 		printk(KERN_INFO "ZZC: ret_val from kvm_write_guest_virt_system() is %d\n", ret_val);
> 		if (ret_val < 0) {
> 			printk(KERN_INFO "ZZC: kvm_write_guest_virt_system() fail\n");
> 			goto zzc_out;
> 		}
> 		// copy_to_user(?, ret_context, DATA_LEN_1);
> 		
> zzc_out:
> 		if(fp){
> 			filp_close(fp, NULL);
> 		}
> 
> 		for(i = 0; i < ARGV_AND_ENVP_CNT; i++){		// release argv
> 			if(argv[i]){
> 				kfree(argv[i]);
> 				argv[i] = NULL;
> 			}
> 		}
> 
> 		for(i = 0; i < ARGV_AND_ENVP_CNT; i++){		// release envp
> 			if(envp[i]){
> 				kfree(envp[i]);
> 				envp[i] = NULL;
> 			}
> 		}
> 
> 		if (tmp_0) {
> 			kfree(tmp_0);
> 		}
> 
> 		if (ret_context) {
> 			kfree(ret_context);
> 		}
> 		
> 
> 		ret = 0;
> 		break;
> 	}	
> 	// ZZC-end
